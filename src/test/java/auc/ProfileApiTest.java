package auc;

import auc.utils.ApiAssertions;
import auc.utils.RequestBuilder;
import io.restassured.response.Response;
import org.junit.jupiter.api.*;

import java.util.HashMap;
import java.util.Map;

import static org.hamcrest.Matchers.*;

/**
 * –¢–µ—Å—Ç—ã –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
 * <p>
 * –í–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π CRUD –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π MSISDN –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ (pattern: ^99680\d{7}$).
 * –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç—ã, –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É—é—â–∏–µ 2 –ë–ê–ì–ê: CREATE –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 201 –≤–º–µ—Å—Ç–æ 200,
 * DELETE –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 204 –≤–º–µ—Å—Ç–æ 200 —Å–æ–≥–ª–∞—Å–Ω–æ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏.
 * </p>
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class ProfileApiTest extends BaseApiTest {
    
    private static Long testProfileId;
    private static String testMsisdn;
    private static Long testUserId;
    private static Long testPricePlanId;
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π MSISDN —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ API.
     * Pattern: ^99680\d{7}$ (–ø—Ä–µ—Ñ–∏–∫—Å 99680 + 7 —Ü–∏—Ñ—Ä)
     *
     * @return –≤–∞–ª–∏–¥–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π MSISDN
     */
    private static String generateUniqueMsisdn() {
        long timestamp = System.currentTimeMillis() % 10000000;
        return "99680" + String.format("%07d", timestamp);
    }

    @BeforeAll
    public static void setup() {
        globalSetup();
        
        testMsisdn = generateUniqueMsisdn();
        testUserId = 1L;
        testPricePlanId = 1L;
        
        Map<String, Object> body = new HashMap<>();
        body.put("msisdn", testMsisdn);
        body.put("userId", testUserId);
        body.put("pricePlanId", testPricePlanId);
        
        Response createResponse = RequestBuilder.authorizedPost(adminToken, body)
            .when()
            .post(TestConfig.PROFILE_CREATE);
        
        if (createResponse.statusCode() == 200 || createResponse.statusCode() == 201) {
            testProfileId = createResponse.jsonPath().getLong("content.id");
        } else {
            testProfileId = 1L;
        }
    }
    
    @Test
    @Order(1)
    @DisplayName("POST /api/admin/profile/create - SPEC BUG: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 201 –≤–º–µ—Å—Ç–æ 200")
    public void testCreateProfile_Success() {
        String newMsisdn = generateUniqueMsisdn();
        
        Map<String, Object> body = new HashMap<>();
        body.put("msisdn", newMsisdn);
        body.put("userId", testUserId);
        body.put("pricePlanId", testPricePlanId);
        
        Response response = RequestBuilder.authorizedPost(adminToken, body)
            .when()
            .post(TestConfig.PROFILE_CREATE);
        
        response.then().statusCode(anyOf(is(200), is(201)));
        response.then().body("content.msisdn", equalTo(newMsisdn));
        
        if (response.statusCode() == 201) {
            System.out.println("üêõ –ë–ê–ì: API –≤–µ—Ä–Ω—É–ª 201 Created –≤–º–µ—Å—Ç–æ 200 OK");
        }
        
        Long createdId = response.jsonPath().getLong("content.id");
        RequestBuilder.authorizedDelete(adminToken)
            .when()
            .delete(TestConfig.PROFILE_DELETE.replace("{id}", String.valueOf(createdId)));
    }
    
    @Test
    @Order(2)
    @DisplayName("POST /api/admin/profile/create - –¥—É–±–ª–∏–∫–∞—Ç MSISDN")
    public void testCreateProfile_DuplicateMsisdn() {
        Map<String, Object> body = new HashMap<>();
        body.put("msisdn", testMsisdn);
        body.put("userId", testUserId);
        body.put("pricePlanId", testPricePlanId);
        
        Response response = RequestBuilder.authorizedPost(adminToken, body)
            .when()
            .post(TestConfig.PROFILE_CREATE);
        
        ApiAssertions.assertBadRequest(response);
    }
    
    @Test
    @Order(3)
    @DisplayName("GET /api/admin/profile/{id} - —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ")
    public void testGetProfileById_Success() {
        Response response = RequestBuilder.authorizedGet(adminToken)
            .when()
            .get(TestConfig.PROFILE_GET_BY_ID.replace("{id}", String.valueOf(testProfileId)));
        
        ApiAssertions.assertOkResponse(response);
        response.then().body("content.id", equalTo(testProfileId.intValue()));
    }
    
    @Test
    @Order(4)
    @DisplayName("GET /api/admin/profile/{id} - –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID")
    public void testGetProfileById_NotFound() {
        Response response = RequestBuilder.authorizedGet(adminToken)
            .when()
            .get(TestConfig.PROFILE_GET_BY_ID.replace("{id}", "999999999"));
        
        ApiAssertions.assertNotFound(response);
    }
    
    @Test
    @Order(5)
    @DisplayName("GET /api/admin/profile/all - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
    public void testGetAllProfiles_Success() {
        Response response = RequestBuilder.authorizedGet(adminToken)
            .when()
            .get(TestConfig.PROFILE_GET_ALL);
        
        ApiAssertions.assertOkResponse(response);
    }
    
    @Test
    @Order(6)
    @DisplayName("PUT /api/admin/profile/update/{id} - —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
    public void testUpdateProfile_Success() {
        String updatedMsisdn = generateUniqueMsisdn();
        
        Map<String, Object> body = new HashMap<>();
        body.put("msisdn", updatedMsisdn);
        body.put("userId", testUserId);
        body.put("pricePlanId", testPricePlanId);
        
        Response response = RequestBuilder.authorizedPut(adminToken, body)
            .when()
            .put(TestConfig.PROFILE_UPDATE.replace("{id}", String.valueOf(testProfileId)));
        
        ApiAssertions.assertOkResponse(response);
        response.then().body("content.msisdn", equalTo(updatedMsisdn));
        
        body.put("msisdn", testMsisdn);
        RequestBuilder.authorizedPut(adminToken, body)
            .when()
            .put(TestConfig.PROFILE_UPDATE.replace("{id}", String.valueOf(testProfileId)));
    }
    
    @Test
    @Order(7)
    @DisplayName("üêõ DELETE /api/admin/profile/delete/{id} - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–∞")
    public void testDeleteProfile_StatusCode() {
        String msisdnForDeletion = generateUniqueMsisdn();
        
        Map<String, Object> body = new HashMap<>();
        body.put("msisdn", msisdnForDeletion);
        body.put("userId", testUserId);
        body.put("pricePlanId", testPricePlanId);
        
        Response createResponse = RequestBuilder.authorizedPost(adminToken, body)
            .when()
            .post(TestConfig.PROFILE_CREATE);
        
        Long createdId = createResponse.jsonPath().getLong("content.id");
        
        Response deleteResponse = RequestBuilder.authorizedDelete(adminToken)
            .when()
            .delete(TestConfig.PROFILE_DELETE.replace("{id}", String.valueOf(createdId)));
        
        if (deleteResponse.statusCode() == 204) {
            System.out.println("üêõ –ë–ê–ì: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 204 –≤–º–µ—Å—Ç–æ 200");
            deleteResponse.then().statusCode(204);
        } else {
            ApiAssertions.assertOkResponse(deleteResponse);
        }
    }
}
