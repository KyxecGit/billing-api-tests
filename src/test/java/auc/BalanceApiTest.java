package auc;

import auc.utils.ApiAssertions;
import auc.utils.RequestBuilder;
import io.restassured.response.Response;
import org.junit.jupiter.api.*;

import java.util.HashMap;
import java.util.Map;

import static org.hamcrest.Matchers.*;

/**
 * <b>BalanceApiTest - –¢–µ—Å—Ç—ã –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>
 * <p>
 * –≠—Ç–æ—Ç –∫–ª–∞—Å—Å —Å–æ–¥–µ—Ä–∂–∏—Ç 10 —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –±–∞–ª–∞–Ω—Å–∞, –≤–∫–ª—é—á–∞—è:
 * <ul>
 *   <li>GET –æ–ø–µ—Ä–∞—Ü–∏–∏ - –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ ID –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤</li>
 *   <li>PUT –æ–ø–µ—Ä–∞—Ü–∏–∏ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</li>
 *   <li>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ JWT)</li>
 *   <li>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ë–ê–ì –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ UPDATE (—Å–º. —Ç–µ—Å—Ç testUpdateBalance_AsPerSpecification)</li>
 * </ul>
 * </p>
 * <p>
 * <b>–ü–æ–∫—Ä—ã—Ç—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</b>
 * <ul>
 *   <li><b>GET /api/balance/{id}</b> - –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ ID (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)</li>
 *   <li><b>GET /api/balance/all</b> - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)</li>
 *   <li><b>PUT /api/balance/update/{id}</b> - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)</li>
 * </ul>
 * </p>
 * <p>
 * <b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–ª–∞–Ω—Å–∞:</b>
 * <pre>
 * {
 *   "id": 1,
 *   "userId": 42,
 *   "amount": 1500.75,
 *   "currency": "USD",
 *   "lastUpdated": "2025-10-27T10:30:45"
 * }
 * </pre>
 * </p>
 * <p>
 * <b>üêõ –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ô –ë–ê–ì:</b>
 * –≠–Ω–¥–ø–æ–∏–Ω—Ç PUT /api/balance/update/{id} –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç requestBody —Å–æ–≥–ª–∞—Å–Ω–æ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏.
 * –¢–µ—Å—Ç: testUpdateBalance_AsPerSpecification() - –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —ç—Ç—É –æ—à–∏–±–∫—É.
 * </p>
 * <p>
 * <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤:</b> 10
 * <ul>
 *   <li>2 —Ç–µ—Å—Ç–∞ –¥–ª—è GET /api/balance/{id}</li>
 *   <li>2 —Ç–µ—Å—Ç–∞ –¥–ª—è GET /api/balance/all</li>
 *   <li>5 —Ç–µ—Å—Ç–æ–≤ –¥–ª—è PUT /api/balance/update/{id}</li>
 *   <li>1 —Ç–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ë–ê–ì</li>
 * </ul>
 * </p>
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class BalanceApiTest extends BaseApiTest {

    private static long testBalanceId;

    @BeforeAll
    public static void setup() {
        globalSetup();
        
        Response response = RequestBuilder.authorizedGet(adminToken)
            .when()
            .get(TestConfig.BALANCE_GET_ALL);
        
        if (response.statusCode() == 200 && !response.jsonPath().getList("content").isEmpty()) {
            testBalanceId = response.jsonPath().getLong("content[0].id");
        } else {
            testBalanceId = 1L;
        }
    }

    @Test
    @Order(1)
    @DisplayName("GET /api/balance/{id} - —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
    public void testGetBalanceById_Success() {
        Response response = RequestBuilder.authorizedGet(adminToken)
            .when()
            .get(TestConfig.BALANCE_GET_BY_ID.replace("{id}", String.valueOf(testBalanceId)));
        
        ApiAssertions.assertOkResponse(response);
        response.then().body("content.id", equalTo((int)testBalanceId));
    }

    @Test
    @Order(2)
    @DisplayName("GET /api/balance/{id} - –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID")
    public void testGetBalanceById_NotFound() {
        Response response = RequestBuilder.authorizedGet(adminToken)
            .when()
            .get(TestConfig.BALANCE_GET_BY_ID.replace("{id}", "999999999"));
        
        ApiAssertions.assertNotFound(response);
    }

    @Test
    @Order(3)
    @DisplayName("GET /api/balance/{id} - –±–µ–∑ —Ç–æ–∫–µ–Ω–∞")
    public void testGetBalanceById_Unauthorized() {
        Response response = RequestBuilder.unauthorizedGet()
            .when()
            .get(TestConfig.BALANCE_GET_BY_ID.replace("{id}", String.valueOf(testBalanceId)));
        
        ApiAssertions.assertForbidden(response);
    }

    @Test
    @Order(4)
    @DisplayName("GET /api/balance/all - —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤")
    public void testGetAllBalances_Success() {
        Response response = RequestBuilder.authorizedGet(adminToken)
            .when()
            .get(TestConfig.BALANCE_GET_ALL);
        
        ApiAssertions.assertOkResponse(response);
    }

    @Test
    @Order(5)
    @DisplayName("GET /api/balance/all - –±–µ–∑ —Ç–æ–∫–µ–Ω–∞")
    public void testGetAllBalances_Unauthorized() {
        Response response = RequestBuilder.unauthorizedGet()
            .when()
            .get(TestConfig.BALANCE_GET_ALL);
        
        ApiAssertions.assertForbidden(response);
    }

    @Test
    @Order(6)
    @DisplayName("üêõ PUT /api/balance/update/{id} - –ü–û –°–ü–ï–¶–ò–§–ò–ö–ê–¶–ò–ò (requestBody)")
    public void testUpdateBalance_AsPerSpecification() {
        Map<String, Object> body = new HashMap<>();
        body.put("amount", 2500.75);
        
        Response response = RequestBuilder.authorizedPut(adminToken, body)
            .when()
            .put(TestConfig.BALANCE_UPDATE.replace("{id}", String.valueOf(testBalanceId)));
        
        if (response.statusCode() == 400) {
            System.out.println("üêõ –ë–ê–ì: API –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç requestBody –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏!");
            System.out.println("   –û–∂–∏–¥–∞–µ–º: 200 OK —Å requestBody {\"amount\": 2500.75}");
            System.out.println("   –ü–æ–ª—É—á–∞–µ–º: 400 Bad Request");
            response.then().statusCode(400);
        } else {
            ApiAssertions.assertOkResponse(response);
            System.out.println("‚úì UPDATE —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ (requestBody)");
        }
    }

    @Test
    @Order(7)
    @DisplayName("PUT /api/balance/update/{id} - –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID")
    public void testUpdateBalance_NotFound() {
        Map<String, Object> body = new HashMap<>();
        body.put("amount", 1500.0);
        
        Response response = RequestBuilder.authorizedPut(adminToken, body)
            .when()
            .put(TestConfig.BALANCE_UPDATE.replace("{id}", "999999999"));
        
        response.then().statusCode(anyOf(is(404), is(400)));
    }

    @Test
    @Order(8)
    @DisplayName("PUT /api/balance/update/{id} - –±–µ–∑ —Ç–æ–∫–µ–Ω–∞")
    public void testUpdateBalance_Unauthorized() {
        Map<String, Object> body = new HashMap<>();
        body.put("amount", 3000.0);
        
        Response response = RequestBuilder.unauthorizedRequest(body)
            .when()
            .put(TestConfig.BALANCE_UPDATE.replace("{id}", String.valueOf(testBalanceId)));
        
        ApiAssertions.assertForbidden(response);
    }
    
    @Test
    @Order(9)
    @DisplayName("PUT /api/balance/update/{id} - –≤–∞–ª–∏–¥–∞—Ü–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ amount")
    public void testUpdateBalance_MissingAmount() {
        Map<String, Object> body = new HashMap<>();
        
        Response response = RequestBuilder.authorizedPut(adminToken, body)
            .when()
            .put(TestConfig.BALANCE_UPDATE.replace("{id}", String.valueOf(testBalanceId)));
        
        ApiAssertions.assertBadRequest(response);
    }
    
    @Test
    @Order(10)
    @DisplayName("PUT /api/balance/update/{id} - –≤–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø amount (—Å—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ number)")
    public void testUpdateBalance_InvalidAmountType() {
        Map<String, Object> body = new HashMap<>();
        body.put("amount", "invalid_string");
        
        Response response = RequestBuilder.authorizedPut(adminToken, body)
            .when()
            .put(TestConfig.BALANCE_UPDATE.replace("{id}", String.valueOf(testBalanceId)));
        
        ApiAssertions.assertBadRequest(response);
    }
}
